/*
 * ilib-webpack-plugin.js - webpack configuration script for ilib
 *
 * Copyright Â© 2018, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var webpack = require('webpack');
var path = require('path');
var Locale = require("./lib/Locale.js");
var fs = require("fs");

function toArray(set) {
    var ret = [];
    set.forEach(function(element) {
        ret.push(element);
    });
    return ret;
}

function Asset(content) {
    this.content = content || "";
}
Asset.prototype.source = function() {
    return this.content;
};
Asset.prototype.size = function() {
    return this.content.length;
};

function IlibWebpackPlugin(options) {
    this.locales = (options && options.locales) || ["en-US"];
}

IlibWebpackPlugin.prototype.apply = function(compiler) {
    compiler.plugin('emit', function(compilation, callback) {
        var localeData = compilation.localeDataSet;
        var outputFileName, output;
        
        if (localeData) {
            var locales = ["en-US"], 
                plugins = this.options.plugins;
            
            for (var i = 0; i < plugins.length; i++) {
                if (plugins[i] instanceof IlibWebpackPlugin && plugins[i].locales) {
                    locales = plugins[i].locales;
                    break;
                }
            }
            
            var parts = new Set();
            parts.add("."); // always search the root!
            locales.forEach(function(spec) {
                var locale = new Locale(spec);
                parts.add(locale.language);
                if (locale.script) {
                    parts.add(locale.language + "/" + locale.script);
                    if (locale.region) {
                        parts.add(locale.language + "/" + locale.script + "/" + locale.region);
                    }
                }
                if (locale.region) {
                    parts.add(locale.language + "/" + locale.region);
                    parts.add("und/" + locale.region);
                }
            });
            var localeDirs = toArray(parts);

            locales.forEach(function(locale) {
                outputFileName = locale + ".js";
                
                output = 
                    "/*\n" + 
                    " * WARNING: this is a file generated by ilib-webpack-plugin.js.\n" +
                    " * Do not hand edit or else your changes may be overwritten and lost.\n" +
                    " * /\n";
                output += 'var ilib=require("../lib/ilib.js");\n';
                
                localeData.forEach(function(filename) {
                    // time zone data in the zoneinfo files are a special case because they are non-locale data
                    if (filename === "zoneinfo") {
                        // console.log(">>>>>>>>>>>>> processing zoneinfo. cwd is " + process.cwd());
                        var cwdToData = "./data/locale/zoneinfo/zonetab.json";
                        var data = fs.readFileSync(cwdToData, "utf-8");
                        var zonetab = JSON.parse(data);
                        // console.log(">>>>>>>>>>>>> got zone tab.");
                        output += 'ilib.data.zonetab = ' + data + ';\n';
                        // compiler.addDependency(cwdToData);
                        
                        var regionSet = new Set();
                        locales.forEach(function(locale) {
                            regionSet.add(new Locale(locale).region);
                        });
                        var zoneSet = new Set();
                        regionSet.forEach(function(region) {
                            if (zonetab[region]) {
                                zonetab[region].forEach(function(zone) {
                                    zoneSet.add(zone); 
                                });
                            }
                        });
                        zoneSet.forEach(function(zone) {
                            try {
                                var cwdToData = path.join("data/locale/zoneinfo", zone + ".json");
                                if (fs.existsSync(cwdToData)) {
                                    data = fs.readFileSync(cwdToData, "utf-8");
                                    var line = 'ilib.data.zoneinfo["' + zone.replace(/-/g, "m").replace(/\+/g, "p") + '"] = ' + data + ';\n';
                                    // console.log(">>>>>>>>>>>>> Adding zone: " + line);
                                    // compiler.addDependency(cwdToData);
                                    output += line;
                                }
                            } catch (e) {
                                console.log("Error: " + e);
                            }
                        }.bind(this));

                        // now add the generic zones
                        var list = fs.readdirSync("data/locale/zoneinfo");
                        list = list.concat(fs.readdirSync("data/locale/zoneinfo/Etc").map(function(zone) {
                            return "Etc/" + zone;
                        }));

                        list.filter(function(pathname) {
                            return pathname.endsWith(".json") && pathname !== "zonetab.json";
                        }).forEach(function (file) {
                            var zone = path.basename(file, ".json");
                            var cwdToData = path.join("data/locale/zoneinfo", file);
                            data = fs.readFileSync(cwdToData, "utf-8");
                            var line = 'ilib.data.zoneinfo["' + zone.replace(/-/g, "m").replace(/\+/g, "p") + '"] = ' + data + ';\n';
                            // console.log(">>>>>>>>>>>>> Adding generic zone: " + line);
                            // compiler.addDependency(cwdToData);
                            output += line;
                        }.bind(this));
                    } else {
                        var l = new Locale(locale);
                        
                        var parts = [
                            ".",
                            l.language
                        ];
                        
                        if (l.script) {
                            parts.push(l.language + "/" + l.script);
                            if (l.region) {
                                parts.push(l.language + "/" + l.script + "/" + l.region);
                            }
                        }
                        if (l.region) {
                            parts.push(l.language + "/" + l.region);
                            parts.push("und/" + l.region);
                        }

                        parts.forEach(function(localeDir) {
                            try {
                                var cwdToData = path.join("data/locale", localeDir, filename + ".json");
                                if (fs.existsSync(cwdToData)) {
                                    var line = "ilib.data." + filename.replace(/\//g, "_").replace(/-/g, "_");
                                    if (localeDir !== ".") {
                                        line += "_" + localeDir.replace(/\//g, "_");
                                    }
                                    data = fs.readFileSync(cwdToData, "utf-8");
                                    line += " = " + data + ";\n";
                                    // console.log(">>>>>>>>>>>>> Adding line: " + line);
                                    output += line;
                                    // compiler.addDependency(cwdToData);
                                }
                            } catch (e) {
                                console.log("Error: " + e);
                            }
                        }.bind(this));
                    }
                });
                
                output += "module.exports = ilib;\n";
                
                compilation.assets[outputFileName] = new Asset(output);
            }.bind(this));
        } else {
            console.log("No data to include");
        }
        callback();
    });
};

module.exports = IlibWebpackPlugin;